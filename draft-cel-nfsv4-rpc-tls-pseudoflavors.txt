



Network File System Version 4                                   C. Lever
Internet-Draft                                                    Oracle
Intended status: Standards Track                         2 December 2021
Expires: 5 June 2022


   New Pseudoflavors for Remote Procedure Calls with Transport Layer
                                Security
              draft-cel-nfsv4-rpc-tls-pseudoflavors-latest

Abstract

   Recent innovations in Remote Procedure Call transport layer security
   enable broad deployment of encryption and mutual peer authentication
   when exchanging RPC messages.  These security mechanisms can protect
   peers who continue to use RPC_AUTH_SYS, which is not
   cryptographically secure, on open networks.  This document introduces
   several new RPC auth pseudo-flavors that an RPC service can use to
   indicate TLS-related security requirements for accessing that
   service.

Note

   This note is to be removed before publishing as an RFC.

   Discussion of this draft occurs on the NFSv4 working group mailing
   list (nfsv4@ietf.org), archived at
   https://mailarchive.ietf.org/arch/browse/nfsv4/. Working Group
   information is available at https://datatracker.ietf.org/wg/nfsv4/
   about/.

   Submit suggestions and changes as pull requests at
   https://github.com/chucklever/i-d-rpc-tls-pseudoflavors.
   Instructions are on that page.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 5 June 2022.

Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Requirements Language
   3.  New RPC Auth Pseudo-Flavors
   4.  Channel Binding
     4.1.  TLS Channel Binding
     4.2.  SSHv2 Channel Binding
   5.  NFS Examples
     5.1.  Network File System version 3
     5.2.  Network File System version 4
       5.2.1.  NFSv4 State Protection
   6.  Implementation Status
   7.  Security Considerations
   8.  IANA Considerations
     8.1.  New RPC Auth Flavors
     8.2.  Pseudoflavors for Secure AUTH_NONE
     8.3.  Pseudoflavors for Secure AUTH_SYS
   9.  References
     9.1.  Normative References
     9.2.  Informative References
   Acknowledgments
   Author's Address

1.  Introduction

   Each ONC RPC transaction may be associated with a user and a set of
   groups.  That transaction's RPC auth flavor determines how the user/
   groups are identified and whether they are authenticated.

   The peers which host applications and RPC services may also be
   identified and authenicated in each RPC transaction, again depending
   on the transaction's RPC auth flavor.

   Not all flavors provide peer and user identification and
   authentication.  For example, the traditional RPC auth flavor
   AUTH_NONE identifies no user or group and no authentication of users
   or peers.

   The traditional RPC auth flavor AUTH_SYS, as it is defined in
   [RFC5531], provides identification of peers, users, and groups, but
   no authentication of any of these.

   Moreover, unlike some GSS security services, these RPC auth flavors
   provide no confidentiality or integrity checking.  Therefore
   AUTH_NONE and AUTH_SYS are considered insecure.

   Mutual peer authentication and encryption provided at the transport
   layer is known to make the use of AUTH_NONE and AUTH_SYS more secure.

   An RPC service might want to indicate to its clients that it will not
   allow access via AUTH_NONE or AUTH_SYS unless such underlying
   encryption or peer authentication services are in place.  To do that,
   this document requests the allocation of new RPC auth flavors that
   upper layers such as NFS [RFC8881] can use to enforce stronger
   security when unauthenticated RPC auth flavors are in use.

   The author expects that, in addition to RPC-with-TLS as defined in
   [I-D.ietf-nfsv4-rpc-tls], other novel RPC transports will eventually
   appear that also provide transport layer security features.  These
   transports can benefit from the pseudo-flavors defined in this
   document.

2.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  New RPC Auth Pseudo-Flavors

   The distinction between RPC auth flavors and pseudo-flavors is
   described in Section 13.4.2 of [RFC5531].

   This document requests allocation of several RPC auth pseudo-flavors
   that servers may advertise to clients but are not used in individual
   RPC transactions, as follows:

   *  The new RPC auth pseudo-flavor AUTH_NONE_MPA indicates that the
      client may use the AUTH_NONE RPC auth flavor in RPC transactions
      only if both endpoints have mutually authenticated.  Encryption of
      traffic between these peers is not required.

   *  The new RPC auth pseudo-flavor AUTH_NONE_ENC indicates that the
      client may use the AUTH_NONE RPC auth flavor in RPC transactions
      only if traffic between these peers is encrypted.  Mutual
      authentication is not required.

   *  The new RPC auth pseudo-flavor AUTH_NONE_MPA_ENC indicates that
      the client may use the AUTH_NONE RPC auth flavor in RPC
      transactions only if both endpoints have mutually authenticated
      and traffic between these peers is encrypted.

   *  The new RPC auth pseudo-flavor AUTH_SYS_MPA indicates that the
      client may use the AUTH_SYS RPC auth flavor in RPC transactions
      only if both endpoints have mutually authenticated.  Encryption of
      traffic between these peers is not required.

   *  The new RPC auth pseudo-flavor AUTH_SYS_ENC indicates that the
      client may use the AUTH_SYS RPC auth flavor in RPC transactions
      only if traffic between these peers is encrypted.  Mutual
      authentication is not required.

   *  The new RPC auth pseudo-flavor AUTH_SYS_MPA_ENC indicates that the
      client may use the AUTH_SYS RPC auth flavor in RPC transactions
      only if both endpoints have mutually authenticated and traffic
      between these peers is encrypted.

   If an RPC client sends an RPC transaction whose RPC auth flavor is
   either AUTH_NONE or AUTH_SYS and the underlying transport does not
   provide the required additional security services as indicated above,
   the RPC server MUST reject the RPC Call and reply with a reply_stat
   of MSG_DENIED, a reject_stat of AUTH_ERR, and an auth_stat of
   AUTH_TOOWEAK.

      |  Or a specific auth_stat for this case can be allocated.

4.  Channel Binding

   Certain aspects of transport layer security are not new.  A
   deployment might choose to run NFS on a virtual private network
   established via an ssh tunnel or over IPsec, for example.  The
   Generic Security Service Application Program Interface (GSS-API)
   specification [RFC2743] recognized the use of security provided by
   transport services underlying GSS with the introduction of channel
   binding.  [RFC5056] further describes channel binding as a concept
   that

      ...allows applications to establish that the two end-points of a
      secure channel at one network layer are the same as at a higher
      layer by binding authentication at the higher layer to the channel
      at the lower layer.  This allows applications to delegate session
      protection to lower layers, which has various performance
      benefits.

   We are particularly interested in ensuring that the mutual
   authentication done during a TLS handshake on a transport service
   that handles RPC traffic can be recognized and used by RPC consumers
   for securely authenticating the communicating RPC peers.

   Section 7 of [RFC5929] identifies a set of API characteristics that
   RPC and its underlying transport provide to RPC consumers.

4.1.  TLS Channel Binding

   TLS defines several channel binding types [RFC5929] that RPC
   consumers can use to determine whether appropriate security is
   available and in place to protect RPC transactions that continue to
   use insecure RPC auth flavors such as AUTH_SYS.

   When used with a Certificate handshake message, the 'tls-server-end-
   point' channel binding type as defined in Section 4 of [RFC5929]
   serves as authentication for securing pseudo-flavors that require
   mutual peer authentication.

   The RPC-with-TLS specification requires the use of TLS session
   encryption, so the presence of TLS under an RPC transport is enough
   to secure pseudo-flavors that require encryption.

4.2.  SSHv2 Channel Binding

   When RPC traverses an SSHv2 tunnel established between an RPC server
   and an RPC client, the 'tls-unique' channel binding type as defined
   in Section 3 of [RFC5929] can be used to authenticate peer endpoints
   and provide appropriate confidentiality.

5.  NFS Examples

   This document defines new protocol elements that any RPC consumer can
   employ.  This section presents examples of how a commonly-used RPC
   consumer, NFS, can make use of these new pseudo-flavors.

5.1.  Network File System version 3

   NFSv3 clients query which RPC auth flavors a server requires using
   the MNT procedure, defined in Appendix I of [RFC1813] as part of the
   MOUNT RPC program.

   To require NFSv3 clients to employ underlying transport security when
   using AUTH_NONE or AUTH_SYS, the NFS server includes one or more of
   the new RPC auth pseudo-flavors defined in Section 8 in the
   auth_flavors list that is part of a MNT response.

   For example, an NFSv3 server may list AUTH_SYS_ENC in a MNT response,
   without also listing AUTH_SYS.

5.2.  Network File System version 4

   NFSv4 clients query which RPC auth flavors a server requires using
   the SECINFO or SECINFO_NO_NAME procedures, as defined in [RFC8881].

   To require NFSv4 clients to employ underlying transport security when
   using AUTH_NONE or AUTH_SYS, the NFS server includes one or more of
   the new RPC auth pseudo-flavors defined in Section 8 in the
   SECINFO4resok list that is part of a SECINFO or SECINFO_NO_NAME
   response.

   Once the peers have inspected their endpoint configurations to ensure
   that any required peer authentication has been done and encryption
   has been put into place, they can exchange RPC transactions using the
   traditional AUTH_SYS or AUTH_NONE flavors in each RPC.

5.2.1.  NFSv4 State Protection

      |  It might also be possible to employ channel binding so that an
      |  NFSv4 server can use transport layer authentication to identify
      |  the only client that may modify a particular NFSv4 lease.
      |  Either we can provide that detail here, or it might need to be
      |  specified in an NFSv4-specific document.

6.  Implementation Status

      |  This section is to be removed before publishing this document
      |  as an RFC.

   This section records the status of known implementations of the
   protocol defined by this specification at the time of posting of this
   Internet-Draft, and is based on a proposal described in [RFC7942].
   The description of implementations in this section is intended to
   assist the IETF in its decision processes in progressing drafts to
   RFCs.

   Please note that the listing of any individual implementation here
   does not imply endorsement by the IETF.  Furthermore, no effort has
   been spent to verify the information presented here that was supplied
   by IETF contributors.  This is not intended as, and must not be
   construed to be, a catalog of available implementations or their
   features.  Readers are advised to note that other implementations may
   exist.

   There are currently no known implementations of the new RPC pseudo-
   flavors requested by this document.

7.  Security Considerations

   A discussion of the shortcomings of the AUTH_SYS RPC auth flavor
   appear in the final paragraph of Appendix A of [RFC5531] and in
   Appendix A of [I-D.ietf-nfsv4-rpc-tls].

   Important security considerations related to the use of channel
   binding are discussed throughout [RFC5056] and in Section 10 of
   [RFC5929].

   To be further expanded once the proposed set of IANA requests is
   finalized.

8.  IANA Considerations

      |  RFC Editor: In the following subsections, please replace RFC-
      |  TBD with the RFC number assigned to this document.
      |  Furthermore, please remove this Editor's Note before this
      |  document is published.

8.1.  New RPC Auth Flavors

   Following Appendix B of [RFC5531], this document requests several new
   entries in the RPC Authentication Flavor Numbers
   (https://www.iana.org/assignments/rpc-authentication-numbers/rpc-
   authentication-numbers.xhtml) registry.  The purpose of these new
   flavors is to indicate the use of transport layer encryption or
   mutual peer authentication with insecure RPC auth flavors.  All new
   flavors described in the sections below are pseudo-flavors.

8.2.  Pseudoflavors for Secure AUTH_NONE

   The fields in the new entries are assigned as follows:

   +===================+==============+=====+================+=========+
   | Identifier String | Flavor Name  |Value|  Description   |Reference|
   +===================+==============+=====+================+=========+
   | AUTH_NONE_MPA     |   NONE_MPA   | TBD | AUTH_NONE with |  RFC_TBD|
   |                   |              |     |  mutual peer   |         |
   |                   |              |     | authentication |         |
   +-------------------+--------------+-----+----------------+---------+
   | AUTH_NONE_ENC     |   NONE_ENC   | TBD | AUTH_NONE with |  RFC_TBD|
   |                   |              |     |transport layer |         |
   |                   |              |     |   encryption   |         |
   +-------------------+--------------+-----+----------------+---------+
   | AUTH_NONE_MPA_ENC | NONE_MPA_ENC | TBD | AUTH_NONE with |  RFC_TBD|
   |                   |              |     |      peer      |         |
   |                   |              |     | authentication |         |
   |                   |              |     | and encryption |         |
   +-------------------+--------------+-----+----------------+---------+

                                  Table 1

   Please allocate the numeric values from the range 400000-409999.

8.3.  Pseudoflavors for Secure AUTH_SYS

   The fields in the new entries are assigned as follows:

   +==================+=============+=====+================+===========+
   |Identifier String | Flavor Name |Value|  Description   | Reference |
   +==================+=============+=====+================+===========+
   |AUTH_SYS_MPA      |   SYS_MPA   | TBD | AUTH_SYS with  |   RFC_TBD |
   |                  |             |     |  mutual peer   |           |
   |                  |             |     | authentication |           |
   +------------------+-------------+-----+----------------+-----------+
   |AUTH_SYS_ENC      |   SYS_ENC   | TBD | AUTH_SYS with  |   RFC_TBD |
   |                  |             |     |transport layer |           |
   |                  |             |     |   encryption   |           |
   +------------------+-------------+-----+----------------+-----------+
   |AUTH_SYS_MPA_ENC  | SYS_MPA_ENC | TBD | AUTH_SYS with  |   RFC_TBD |
   |                  |             |     |      peer      |           |
   |                  |             |     | authentication |           |
   |                  |             |     | and encryption |           |
   +------------------+-------------+-----+----------------+-----------+

                                  Table 2

   Please allocate the numeric values from the range 410000-419999.

9.  References

9.1.  Normative References

   [I-D.ietf-nfsv4-rpc-tls]
              Myklebust, T. and C. Lever, "Towards Remote Procedure Call
              Encryption By Default", Work in Progress, Internet-Draft,
              draft-ietf-nfsv4-rpc-tls-11, 23 November 2020,
              <https://datatracker.ietf.org/doc/html/draft-ietf-nfsv4-
              rpc-tls-11>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC5531]  Thurlow, R., "RPC: Remote Procedure Call Protocol
              Specification Version 2", RFC 5531, DOI 10.17487/RFC5531,
              May 2009, <https://www.rfc-editor.org/rfc/rfc5531>.

   [RFC5929]  Altman, J., Williams, N., and L. Zhu, "Channel Bindings
              for TLS", RFC 5929, DOI 10.17487/RFC5929, July 2010,
              <https://www.rfc-editor.org/rfc/rfc5929>.

   [RFC7942]  Sheffer, Y. and A. Farrel, "Improving Awareness of Running
              Code: The Implementation Status Section", BCP 205,
              RFC 7942, DOI 10.17487/RFC7942, July 2016,
              <https://www.rfc-editor.org/rfc/rfc7942>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

9.2.  Informative References

   [RFC1813]  Callaghan, B., Pawlowski, B., and P. Staubach, "NFS
              Version 3 Protocol Specification", RFC 1813,
              DOI 10.17487/RFC1813, June 1995,
              <https://www.rfc-editor.org/rfc/rfc1813>.

   [RFC2743]  Linn, J., "Generic Security Service Application Program
              Interface Version 2, Update 1", RFC 2743,
              DOI 10.17487/RFC2743, January 2000,
              <https://www.rfc-editor.org/rfc/rfc2743>.

   [RFC5056]  Williams, N., "On the Use of Channel Bindings to Secure
              Channels", RFC 5056, DOI 10.17487/RFC5056, November 2007,
              <https://www.rfc-editor.org/rfc/rfc5056>.

   [RFC8881]  Noveck, D., Ed. and C. Lever, "Network File System (NFS)
              Version 4 Minor Version 1 Protocol", RFC 8881,
              DOI 10.17487/RFC8881, August 2020,
              <https://www.rfc-editor.org/rfc/rfc8881>.

Acknowledgments

   David Noveck is responsible for the basic architecture of this
   proposal.  The author is also grateful to Bill Baker, Rick Macklem,
   Greg Marsden, and Martin Thomson for their input and support.

   Special thanks to Transport Area Directors Martin Duke and
   Zaheduzzaman Sarker, NFSV4 Working Group Chairs David Noveck and
   Brian Pawlowski, and NFSV4 Working Group Secretary Thomas Haynes for
   their guidance and oversight.

Author's Address

   Charles Lever
   Oracle Corporation
   United States of America

   Email: chuck.lever@oracle.com
